plugins {
    id 'java'
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.1.0'
    id 'org.beryx.jlink' version '3.1.1'
}

group = 'info.megadrum'
version '1.0'
description 'Megadrum Manager'

java {
    sourceCompatibility = JavaVersion.VERSION_24
    targetCompatibility = JavaVersion.VERSION_24
}


repositories {
    mavenCentral()
}

ext {
    junitVersion = '5.10.2'
}

compileJava {
    options.encoding = 'UTF-8'
}


tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

application {
    mainModule = 'info.megadrum.managerfx'
    mainClass = 'info.megadrum.managerfx.Main'
}


javafx {
    version = '23.0.1'
    modules = ['javafx.controls', 'javafx.fxml', 'javafx.web']
}

dependencies {
    implementation 'org.openjfx:javafx-controls:23.0.1'
    implementation 'org.openjfx:javafx-fxml:23.0.1'
    implementation 'org.openjfx:javafx-web:23'
    implementation 'org.apache.commons:commons-collections4:4.4'
    implementation 'org.apache.commons:commons-configuration2:2.11.0'

    testImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
}


test {
    useJUnitPlatform()
}

jlink {
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    imageZip = project.file("distributions/${project.name}-${project.version}-${javafx.platform.classifier}.zip")
    launcher {
        name = 'app'
    }

    addExtraDependencies("javafx")

    jpackage {
        installerName = project.name
        imageName = project.name
        vendor = ''
        installerOptions = [
                '--description', project.description,
                '--copyright', 'Copyright Â© 2025',
                '--app-version', project.version
        ]

        installerType = project.findProperty('installerType')
        // we will pass this from the command line (example: -PinstallerType=msi)
        if (installerType == 'msi') {
            imageOptions += ['--icon', 'Windows/MegaDrumManagerFX.iconset']
            installerOptions += [
                    '--win-per-user-install', '--win-dir-chooser',
                    '--win-menu', '--win-shortcut'
            ]
        }
        if (installerType == 'pkg') {
            imageOptions += ['--icon', 'MacOSX/MegaDrumManagerFX.icns']
        }
        if (installerType in ['deb', 'rpm']) {
            imageOptions += ['--icon', 'src/icon_256x256.png']
            installerOptions += [
                    '--linux-menu-group', 'Educational',
                    '--linux-shortcut'
            ]
        }
        if (installerType == 'deb') {
            installerOptions += [
                    '--linux-deb-maintainer', ''
            ]
        }
        if (installerType == 'rpm') {
            installerOptions += [
                    '--linux-rpm-license-type', ''
            ]
        }
    }
}

jlinkZip {
    group = 'distribution'
}

jpackage {
    doFirst {
        project.getProperty('installerType') // throws exception if its missing
    }
}
